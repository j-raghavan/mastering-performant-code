name: Build Python Wheel

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-wheel:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-wheel-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-wheel-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-wheel-
    
    - name: Upgrade pip and install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build wheel
      run: |
        python -m build --wheel
    
    - name: Verify wheel contents
      run: |
        # List wheel contents to verify src and tests are included
        python -c "
        import zipfile
        import glob
        
        wheels = glob.glob('dist/*.whl')
        if wheels:
            with zipfile.ZipFile(wheels[0], 'r') as wheel:
                files = wheel.namelist()
                src_files = [f for f in files if f.startswith('src/')]
                test_files = [f for f in files if f.startswith('tests/')]
                print(f'Wheel contains {len(src_files)} src files and {len(test_files)} test files')
                print('Sample src files:', src_files[:5])
                print('Sample test files:', test_files[:5])
        "
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheel-python-${{ matrix.python-version }}
        path: dist/*.whl
        retention-days: 30
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import mastering_performant_code; print('Successfully imported mastering_performant_code package')"
    
    - name: Run tests from installed wheel
      run: |
        pip install pytest pytest-cov
        python -c "import site, os, subprocess, sys; site_packages = site.getsitepackages()[0]; tests_dir = os.path.join(site_packages, 'tests'); print(f'Tests directory: {tests_dir}'); result = subprocess.run([sys.executable, '-m', 'pytest', tests_dir, '-v', '--tb=short']) if os.path.exists(tests_dir) else print('Tests directory not found in installed package'); exit(result.returncode) if os.path.exists(tests_dir) else exit(1)"

  build-sdist:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Upgrade pip and install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build source distribution
      run: |
        python -m build --sdist
    
    - name: Upload source distribution artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sdist-python-${{ matrix.python-version }}
        path: dist/*.tar.gz
        retention-days: 30

  release:
    needs: [build-wheel, build-sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          wheel-python-3.12/*.whl
          wheel-python-3.13/*.whl
          sdist-python-3.12/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 